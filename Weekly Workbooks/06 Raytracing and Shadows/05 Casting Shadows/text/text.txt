At this stage, it probably doesn't seem like you have made any progress - if anything, this is a _slower_ way of achieving the same results as with the rasteriser. In this next task (and in the tasks tackled next week as well), we will be doing things that are either _hard_ or _impossible_ to do with a rasteriser - so stick with it, it will all to be worth it in the end !

Shadows are a key element of 3D rendering that we have until this point not addressed. We see shadows all the time in the real world (just take a look around you now !). If we want our renders to look realistic, we are going to need to simulate them somehow. For this task, you are going to need a new `vec3` variable to hold the position of a single-point light source. A location in the middle of the room, above the origin, somewhere near the ceiling (but still inside the room) would seem a sensible place for it.

Determining whether or not a particular point on a surface should be drawn in shadow is conceptually relatively straight-forward. All we have to do is to ask ourselves the question: can a particular point "see" the light ? However, there are some additional complexities that we have to deal with when implementing a consistent shadow effect. Review the slides and audio narration above and then implement the concepts discussed in your Ray Tracer.

It is worth noting that your already-implemented `getClosestValidIntersection` function does a lot of the work required in order to check for the visibility of the light from a point on a surface. You may however need to invest a bit of time refactoring it to make it versatile enough to be used for this purpose.

Once you have implemented a shadow feature, your render of the Cornell Box should look something a little bit like the image below (depending on where you position your light source !). Note that your shadow may well appear a little bit "speckly" and you might have shadow pixels appearing where you wouldn't expect to see them. Don't worry, this is not unusual and is a common occurrence when first attempting to render shadows. In the following task we explore this phenomenon in more depth and introduce a technique to (hopefully) fix it.