In this next exercise, rather than filling a triangle with just a _single_ colour, you will load in a "texture map" of pixels from a file and use these to "colour" the triangle. View the slides, audio narration and animations above to gain an understanding of how to do this. Again, the interactive features (i.e. dragging points around the screen) do NOT need to be implemented - these are just for demonstration purposes in the animations. All you need to do is to write a function that will draw a textured triangle when provided with a suitable texture map.

To help you in this task, a `TextureMap` class has been provided for you in the `libs/sdw` folder. This class has a constructor that takes the filename of a PPM image as a parameter and will load the pixel data in from that file for you. A sample <a href="texture.ppm">PPM texture map</a> has been provided for you to use in this task. We recommend that you use this texture map (rather than any other PPM file) because you will be able to compare your results with the screenshot of correct output shown later in this workbook. In addition to this, there are various different variants of the PPM file format and not all of them can be loaded successfully by the `TextureMap` class.

Each `TextureMap` object has a publicly accessible `pixels` attribute that holds all of the pixel data that has been loaded in from the PPM file. This `pixels` attribute is a single dimension vector of pixel-packed RGB integers. Note that there is no representation of x or y positioning within the data. The pixel data is just stored linearly: pixels from one row flow directly into those from the next row (which is pretty typical for pixel data !). The vector contains pure RGB data - there is no concept of a "newline" or "end of row" marker. You will need to work out the positioning of pixels yourself. There are however publicly accessible `width` and `height` attributes of the `TextureMap` class that you can use to find out the dimensions of the original image.

You might have noticed that the `CanvasPoint` class has a `TexturePoint` variable. This has been provided to help you maintain a link between triangle vertices and positions on a texture map. In reality, linking `CanvasPoints` to `TexturePoints` is a very illogical thing to do (for reasons we will talk about later). Maintaining these links here will however make things quick and easy for the time being (until we get around to creating some more complex and appropriate classes).