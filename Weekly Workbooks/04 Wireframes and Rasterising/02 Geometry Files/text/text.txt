The first implementation task in this practical is to write a low-level file reader that can parse in 3D models from numerical data files. Although the focus of this unit is NOT on grammars and parsing, understanding how models can be stored in data files provides us with valuable insight into the essential characteristics of 3D geometry and material properties. View the slides and audio narration above to find out about the OBJ file format.

Once you are happy with the concepts above, write a function that reads in <a href="models/cornell-box.obj" target="_blank">this sample OBJ geometry file</a> and use the data it contains to populate a vector of `ModelTriangles`. At this stage, you should only focus on reading in vertices (lines that being with a `v`) and faces/facets (lines that being with an `f`). We will deal with the other types of line later on in this workbook. Be careful - remember that vertices in OBJ files are indexed from 1 (whereas vectors are indexed from 0).

Once the sample geometry file has been loaded, loop through all of the `ModelTriangles` in your populated vector and print them out, (you should be able to direct `ModelTriangles` to `cout` !) Open the OBJ file with a text editor and manually check your printout against a couple of triangles - just to make sure the data has been loaded correctly.

Add a scaling factor (float) parameter to your OBJ loading function that scales the position of all vertices at the point at which they are read in from the file. This is done in order to adjust the size of the model when it is loaded in (different models might be created to different scales !). This is to avoid the "bunnyzilla" problem illustrated in the image below - here two models have been loaded in from separate files, but the model of the rabbit was originally created with an unusually large size. Using your scaling factor it would be possible to adjust the different models to a consistent size.